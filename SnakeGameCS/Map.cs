using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Security.Policy;
using System.Text;
using System.Threading.Tasks;

namespace SnakeGameCS
{
    internal class Map
    {
        // 壁マップ
        private int[,] wallPos = new int[,] {
            // 1:無描画 2:縦 3:横 4:2重縦 未実装=>5:2重横<= 6:左上角丸 7:左下角丸 8:右上角丸 9:右下角丸
            //0---------+---------*---------+---------*---------+---------*---  
            {6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8},
            {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
            {2,0,6,3,3,3,8,0,6,3,3,3,3,8,0,2,2,0,6,3,3,3,3,8,0,6,3,3,3,8,0,2},
            {2,0,2,1,1,1,2,0,2,1,1,1,1,2,0,2,2,0,2,1,1,1,1,2,0,2,1,1,1,2,0,2},
            {2,0,2,1,1,1,2,0,2,1,1,1,1,2,0,2,2,0,2,1,1,1,1,2,0,2,1,1,1,2,0,2},
            {2,0,7,3,3,3,9,0,7,3,3,3,3,9,0,7,9,0,7,3,3,3,3,9,0,7,3,3,3,9,0,2},
            {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
            {2,0,6,3,3,3,8,0,6,8,0,6,3,3,3,3,3,3,3,3,8,0,6,8,0,6,3,3,3,8,0,2},
            {2,0,7,3,3,3,9,0,2,2,0,7,3,3,3,8,6,3,3,3,9,0,2,2,0,7,3,3,3,9,0,2},
            {2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2},
            {7,3,3,3,3,3,8,0,2,7,3,3,3,8,0,2,2,0,6,3,3,3,9,2,0,6,3,3,3,3,3,9},
            {1,1,1,1,1,1,2,0,2,6,3,3,3,9,0,7,9,0,7,3,3,3,8,2,0,2,1,1,1,1,1,1},
            {1,1,1,1,1,1,2,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,1,1,1,1,1,1},
            {1,1,1,1,1,1,2,0,2,2,0,6,3,3,3,3,3,3,3,3,8,0,2,2,0,2,1,1,1,1,1,1},
            {3,3,3,3,3,3,9,0,7,9,0,2,1,1,1,1,1,1,1,1,2,0,7,9,0,7,3,3,3,3,3,3},
            {0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,1,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0},
            {3,3,3,3,3,3,8,0,6,8,0,2,1,1,1,1,1,1,1,1,2,0,6,8,0,6,3,3,3,3,3,3},
            {1,1,1,1,1,1,2,0,2,2,0,7,3,3,3,3,3,3,3,3,9,0,2,2,0,2,1,1,1,1,1,1},
            {1,1,1,1,1,1,2,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2,1,1,1,1,1,1},
            {1,1,1,1,1,1,2,0,2,2,0,6,3,3,3,3,3,3,3,3,8,0,2,2,0,2,1,1,1,1,1,1},
            {6,3,3,3,3,3,9,0,7,9,0,7,3,3,3,8,6,3,3,3,9,0,7,9,0,7,3,3,3,3,3,8},
            {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
            {2,0,6,3,3,3,8,0,6,3,3,3,3,8,0,2,2,0,6,3,3,3,3,8,0,6,3,3,3,8,0,2},
            {2,0,7,3,3,8,2,0,7,3,3,3,3,9,0,7,9,0,7,3,3,3,3,9,0,2,6,3,3,9,0,2},
            {2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2},
            {7,3,3,8,0,2,2,0,6,8,0,6,3,3,3,3,3,3,3,3,8,0,6,8,0,2,2,0,6,3,3,9},
            {6,3,3,9,0,7,9,0,2,2,0,7,3,3,3,8,6,3,3,3,9,0,2,2,0,7,9,0,7,3,3,8},
            {2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2},
            {2,0,6,3,3,3,3,3,9,7,3,3,3,8,0,2,2,0,6,3,3,3,9,7,3,3,3,3,3,8,0,2},
            {2,0,7,3,3,3,3,3,3,3,3,3,3,9,0,7,9,0,7,3,3,3,3,3,3,3,3,3,3,9,0,2},
            {2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
            {7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,9}
        };

        private int _width;
        private int _height;
        private int _size;

        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="width"></param>
        /// <param name="_height"></param>
        public Map(int width, int height, int size)
        {
            _width = width;
            _height = height;
            _size = size;
        }
        /// <summary>
        /// Map描画
        /// </summary>
        /// <param name="g"></param>

        public void drawMap(Graphics g)
        {
            Pen oPen = new Pen(System.Drawing.Color.Blue, 2);

            for (int x = 0; x < _width; x++)
            {
                for (int y = 0; y < _height; y++)
                {
                    switch (wallPos[y, x])
                    {
                        case 2: // 縦線
                            g.DrawLine(oPen, (x * _size) + (_size / 2), y * _size,        
                                             (x * _size) + (_size / 2), (y + 1) * _size);    
                            break;
                        case 3: // 横線
                            g.DrawLine(oPen, x * _size, (y * _size) + (_size / 2),      
                                            (x + 1) * _size, (y * _size) + (_size / 2));     
                            break;
                        case 6: // 左上角丸
                            g.DrawArc(oPen, x * _size + (_size / 2), y * _size + (_size / 2), _size, _size, 180, 90);
                            break;
                        case 7: // 左下角丸
                            g.DrawArc(oPen, x * _size + (_size / 2), y * _size - (_size / 2), _size, _size, 90, 90);
                            break;
                        case 8: // 右上角丸
                            g.DrawArc(oPen, x * _size - (_size / 2), y * _size + (_size / 2), _size, _size, 270, 90);
                            break;
                        case 9: // 右下角丸
                            g.DrawArc(oPen, x * _size - (_size / 2), y * _size - (_size / 2), _size, _size, 0, 90);
                            break;
                    }
                }
            }
            oPen.Dispose();
        }
        /// <summary>
        /// 壁値を返す
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <returns></returns>
        public int getMap(int x, int y)
        {
            return wallPos[x, y];
        }
    }
}
